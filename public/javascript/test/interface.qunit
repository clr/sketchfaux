<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
  <head>
    <title>Drawing Canvas Tests</title>    
  	<script language="javascript" src="../jquery-1.3.2.js"></script>
    <script language="javascript" src="testrunner.js" type="text/javascript"></script>
    <script language="javascript" src="testnavigation.js" type="text/javascript"></script>
    <link media="screen" href="testsuite.css" type="text/css" rel="stylesheet"/>    
    <script language="javascript" src="testsetup.js" type="text/javascript"></script>
  </head>
  <body>
    <script language="javascript" type="text/javascript">

  beforeEach = function(){
    interface = new Interface( $( 'div.sketchfaux' )[0] );
  }

  mouseDown = function(){
    commander = new Event( 'mousedown' );
    commander.trigger( interface.getCanvas().getCanvasElement() );
  }
  
  mouseUp = function(){
    commander = new Event( 'mouseup' );
    commander.trigger( interface.getCanvas().getCanvasElement() );
  }
  
  testJson = function(){
    // Test for native json object.
    if( ( typeof( JSON ) !== 'undefined' ) && ( typeof( JSON.parse ) === 'function' ) ){ 
      return JSON.parse( $( '#test-json' ).html() );
    } else {
      return $.secureEvalJSON( $( '#test-json' ).html() );
    }
  }

  module( "Interface Tests");
    
  test( "Should have getters and setters.", function(){
    beforeEach();
    interface.pencilDown();
    equals( true, interface.isPencilOnCanvas() );
    interface.pencilUp();
    equals( false, interface.isPencilOnCanvas() );
    equals( interface.canvas, interface.getCanvas() );
    equals( interface.currentLine, interface.getCurrentLine() );
  });
  
  test( "On mousedown, Interface should put the pencil to the canvas.", function(){
    beforeEach();
    equals( interface.isPencilOnCanvas(), false );
    mouseDown();
    equals( interface.isPencilOnCanvas(), true );
  });
  
  test( "On mousedown, Interface should create a line 'currentLine' and append it to data.", function(){
    beforeEach();
    mouseDown();
    same( interface.data.l[0], interface.getCurrentLine() );
  });
  
  test( "On mousedown, Interface's 'currentLine' should start with a point.", function(){
    beforeEach();
    mouseDown();
    // We start at 0, 0 in fake event trigger.
    same( interface.data.l[0].p[0], [ -4, -4 ] );
  });
  
  test( "On mousedown, Interface's 'currentLine' should have it's style set.", function(){
    beforeEach();
    mouseDown();
    same( interface.data.l[0].s, { c: '#ff0000', o: 1.0, d: 4 } );
  });
  
  test( "On mouseup, Interface should pull up on the pencil.", function(){
    beforeEach();
    equals( false, interface.isPencilOnCanvas() );
    mouseDown();
    equals( true, interface.isPencilOnCanvas() );
    mouseUp();
    equals( false, interface.isPencilOnCanvas() );
  });
  
  test( "Interface should generate Canvas.", function(){
    beforeEach();
    interface.generateCanvas();
    equals( interface.getCanvas().getCanvasElement(), $( interface.getContext() ).find( 'canvas' )[1] );
  });
  
  test( "Interface should generate Color Picker.", function(){
    beforeEach();
    equals( $( interface.getColorPicker() ).find( 'div > div' ).length, 15 );
  });
  
  test( "Interface should generate Size Picker.", function(){
    beforeEach();
    equals( $( interface.getSizePicker() ).find( 'span' ).html(), 'SIZE' );
  });

  test( "Interface should generate Opacity Picker.", function(){
    beforeEach();
    equals( $( interface.getOpacityPicker() ).find( 'span' ).html(), 'OPACITY' );
  });

  test( "Interface should generate Speed Picker.", function(){
    beforeEach();
    equals( interface.getSpeed(), 0 );
  });

  test( "Interface should load remote data if it accepted a URL as a second argument.", function(){
    // Necessary for Qunit.
    $.ajaxSetup( { async: false } );
    interface = new Interface( $( 'div.sketchfaux' )[0], '/javascript/test/foggy_winter_day.sample.json' );
    same( interface.getData(), testJson() );
  });
    </script>

    <h1></h1>
    <h2 id="banner"></h2>
    <ol id="tests"></ol>
    <div id="results"></div>
    <div id="main">
      <div class="sketchfaux" style="display:none">
      </div>
    </div>
    <div id="test-json" style="display:none">
{"l": [{"s": {"c": "#999966", "o": 0.6, "d": 70 }, "p": [[90, 62], [90, 62], [90, 79], [91, 109], [91, 130], [91, 138], [91, 137], [105, 93], [118, 30], [127, 4], [129, 22], [129, 101], [129, 121], [131, 122], [138, 112], [172, 66], [184, 45], [184, 44], [178, 79], [177, 100], [183, 92], [186, 73], [198, 53], [202, 48], [209, 38], [213, 25], [215, 19], [215, 16], [205, 13], [178, 13], [148, 28], [138, 42], [141, 62], [174, 104], [208, 128], [213, 132], [201, 134], [185, 129], [178, 128], [192, 113], [217, 95], [235, 88], [235, 86], [219, 87], [194, 94], [144, 90], [132, 89], [132, 86], [149, 62], [167, 30], [170, 22], [164, 22], [141, 32], [119, 38], [112, 38], [108, 37], [95, 31], [81, 28], [66, 24], [53, 24], [36, 26], [21, 30], [10, 34], [1, 39], [-5, 56], [-5, 69], [-5, 84], [4, 106], [17, 116], [31, 110], [62, 86], [104, 44], [112, 38], [114, 52], [99, 85], [45, 125], [23, 140], [18, 151], [18, 165], [18, 174], [18, 181], [17, 189], [2, 199], [-5, 209], [-5, 210], [-2, 199], [24, 119], [41, 5], [41, -9], [29, 51], [21, 122], [30, 167], [30, 169], [29, 170], [29, 170], [29, 170], [29, 162], [29, 158], [29, 157], [29, 157], [29, 162], [29, 165], [26, 165], [26, 165], [26, 165], [26, 165], [26, 165], [26, 165], [26, 165], [26, 165], [26, 165], [26, 165], [26, 165], [26, 165], [27, 156], [26, 154], [23, 152], [11, 151], [3, 150], [3, 150], [24, 154], [84, 156], [129, 147], [135, 148], [130, 155], [77, 189], [1, 225], [-5, 233], [-5, 233], [18, 225], [83, 196], [119, 189], [126, 190], [97, 213], [25, 259], [-3, 280], [-1, 281], [70, 259], [158, 226], [151, 233], [66, 274], [-5, 314], [-2, 323], [38, 323], [99, 323], [141, 323], [148, 323], [100, 331], [44, 340], [-5, 342], [-5, 343], [10, 346], [111, 346], [319, 325], [403, 316], [415, 315], [359, 315], [278, 315], [221, 313], [217, 311], [223, 311], [244, 317], [273, 333], [325, 345], [361, 352], [395, 358], [418, 361], [423, 361], [438, 358], [460, 350], [471, 345], [468, 341], [438, 334], [420, 320], [419, 318], [420, 321], [438, 340], [456, 353], [470, 364], [474, 368], [478, 375], [478, 374], [470, 363], [431, 306], [402, 261], [396, 254], [398, 261], [443, 318], [463, 346], [473, 369], [473, 370], [467, 358], [438, 308], [397, 261], [386, 253], [386, 252], [386, 252], [383, 250], [366, 246], [305, 264], [233, 280], [227, 286], [238, 290], [292, 285], [315, 280], [315, 280], [320, 267], [328, 259], [336, 252], [336, 249], [336, 244], [340, 240], [351, 234], [363, 232], [364, 231], [367, 230], [376, 226], [386, 225], [387, 224], [392, 229], [398, 237], [415, 251], [417, 253], [415, 262], [415, 267], [413, 266], [403, 249], [378, 215], [370, 202], [367, 200], [367, 200], [366, 200], [357, 205], [342, 207], [335, 207], [334, 218], [336, 243], [328, 266], [312, 277], [283, 288], [279, 291], [294, 271], [328, 220], [325, 214], [268, 256], [155, 337], [139, 350], [145, 343], [152, 333], [161, 326], [184, 310], [215, 295], [254, 267], [264, 253], [248, 252], [165, 281], [86, 297], [91, 287], [154, 258], [202, 246], [203, 245], [143, 249], [97, 244], [113, 233], [204, 237], [246, 244], [203, 238], [155, 225], [187, 227], [292, 239], [316, 239], [268, 218], [160, 168], [127, 150], [189, 156], [267, 170], [288, 181], [293, 185], [295, 185], [316, 165], [317, 124], [265, 67], [268, 67], [317, 104], [335, 135], [339, 140], [344, 128], [356, 122], [357, 122], [372, 125], [374, 128], [378, 136], [380, 134], [381, 134], [387, 134], [401, 138], [415, 136], [424, 135], [434, 135], [435, 134], [437, 134], [437, 134], [437, 136], [440, 136], [452, 138], [458, 138], [460, 138], [463, 136], [463, 136], [460, 140], [458, 144], [460, 147], [475, 155], [477, 155], [477, 155], [477, 155], [477, 155], [477, 156], [501, 182], [571, 234], [626, 271], [628, 275], [626, 273], [588, 241], [535, 183], [521, 168], [524, 166], [570, 172], [633, 172], [646, 170], [639, 166], [590, 163], [463, 142], [433, 134], [484, 127], [567, 116], [589, 110], [593, 108], [607, 102], [617, 100], [618, 98], [618, 98], [618, 98], [618, 98], [618, 98], [615, 98], [605, 100], [596, 102], [587, 110], [581, 111], [578, 116], [577, 121], [577, 125], [574, 127], [570, 128], [557, 128], [548, 128], [548, 128], [548, 128], [548, 128]]}, {"s": {"c": "#999966", "o": 0.6, "d": 70 }, "p": [[122, 34], [122, 34], [108, 102], [97, 170], [97, 172], [97, 163], [97, 121], [87, 58], [78, 37], [78, 37], [77, 47], [61, 120], [45, 174], [44, 175], [44, 153], [45, 66], [36, 8], [31, 2], [31, 44], [24, 161], [25, 174], [30, 146], [23, 84], [12, 20], [10, 17], [11, 53], [15, 119], [31, 164], [40, 163], [62, 140], [94, 90], [110, 50], [111, 47], [111, 54], [119, 102], [132, 145], [139, 142], [150, 112], [162, 35], [162, 13], [162, 13], [160, 54], [169, 146], [173, 161], [176, 146], [183, 85], [193, 19], [195, 7], [195, 10], [195, 83], [196, 129], [201, 139], [201, 135], [196, 85], [186, 40], [146, 7], [103, -1], [63, -1], [54, -1], [54, -1], [58, -1], [103, 5], [145, 13], [148, 14], [148, 17], [129, 45], [101, 91], [99, 111], [99, 111], [99, 111], [96, 112]]}, {"s": {"c": "#999966", "o": 0.6, "d": 70 }, "p": [[69, 47], [67, 57], [55, 130], [55, 136], [55, 136], [55, 135], [58, 97], [58, 44], [58, 18], [58, 17], [59, 27], [72, 99], [84, 165], [85, 173], [83, 155], [67, 82], [34, 9], [16, -23], [16, -23], [3, 55], [-5, 149], [-2, 179], [-1, 177], [3, 145], [6, 93], [6, 80], [7, 97], [11, 197], [15, 209], [16, 184], [13, 140], [10, 128], [8, 142], [13, 189], [21, 199], [29, 202], [41, 207], [60, 214]]}, {"s": {"c": "#999966", "o": 0.6, "d": 70 }, "p": [[53, 348], [53, 348], [67, 348], [127, 346], [189, 327], [191, 325], [156, 355], [127, 374], [141, 363], [204, 317], [229, 302], [226, 308], [200, 361], [196, 370], [196, 370], [214, 361], [242, 338], [254, 321], [262, 306], [263, 307], [259, 340], [254, 369], [256, 366], [272, 323], [279, 315], [278, 354], [273, 386], [273, 387], [272, 394], [272, 398], [272, 401], [272, 404], [272, 404]]}]}
</div>

  </body>
</html>
